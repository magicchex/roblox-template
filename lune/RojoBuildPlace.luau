local process = require('@lune/process')
local fsPlus = require('./lib/fsPlus')
local config = require('./config').RojoBuildPlace

local success, buildFilePath = pcall(string.format, '%s/%s.%s', process.args[1], process.args[2], process.args[3])
if not success then
	print('This script requires three arguments which are directoryPath, filename, and placeFileExtension!')
	return
end
print(string.format('Running rojo build -o %s', buildFilePath))
pcall(fsPlus.super.writeDir, process.args[1])
local result = process.exec('rojo', { 'build', '-o', buildFilePath })
print(result.ok and 'Build execution was successful!' or 'Build execution failed!')
print(
	string.format(
		'Traceback:\n%s',
		result.ok and result.stdout or string.format('%s\n%s', result.stderr, result.stdout)
	)
)

local gitignoreContents
success, gitignoreContents = pcall(fsPlus.super.readFile, '.gitignore')

if success then
	for _, folderName in ipairs(config.excludePathsFromGitIgnore) do
		if folderName == process.args then
			return
		end
	end
	local headerLabel = '\n# Place Directory Name - Generated by lune/RojoBuildPlace.luau\n'
	if
		fsPlus.getDepth(process.args[1]) == 1 and not gitignoreContents:match(string.format('\n%s', process.args[1]))
	then
		print(string.format('Attempting to update .gitignore to ignore "%s"', process.args[1]))
		local headerIdx = string.find(gitignoreContents, headerLabel, 1, true)
		if headerIdx then
			local commentIdx = string.find(gitignoreContents, '#', headerIdx)
			local cutoff = commentIdx and commentIdx - 1 or -1
			local section = gitignoreContents:sub(headerIdx, cutoff)
			local leftovers = #gitignoreContents - ((cutoff == -1) and #section or cutoff)
			local absoluteSectionStartIdx = #gitignoreContents - #section - leftovers
			local firstEmptyLine = string.find(section, '\n\n')
			local trailingEmptyLine = string.find(section, '\n', -1)

			if firstEmptyLine then
				-- {phase}\n\n{phase} -> {phase}\n{insertion}\n{phase}
				fsPlus.insertToFile('.gitignore', absoluteSectionStartIdx + firstEmptyLine + 2, process.args[1])
				return
			end
			if trailingEmptyLine and trailingEmptyLine == #section then
				-- {phase}\n{phase} -> {phase}\n{insertion}\n{phase}
				fsPlus.insertToFile(
					'.gitignore',
					absoluteSectionStartIdx + trailingEmptyLine + 2,
					string.format('%s\n', process.args[1])
				)
				return
			end
			-- {phase}{phase} -> {phase}\n{insertion}{phase}
			fsPlus.insertToFile('gitignore', absoluteSectionStartIdx + #section, string.format('\n%s', process.args[1]))
		else
			pcall(fsPlus.appendToFile, '.gitignore', string.format('%s%s ', headerLabel, process.args[1]))
		end
	end
end
